#!/bin/sh

# How to use
usage() {
    echo "usage: figure it out!"
}

###############
#  Variables  #
###############

bibfile=$1

style="./bib/mylanguage.csl"
type="Output"
add_section="True"
content_path="./content/pages/"

while [ "$1" != "" ]; do
    case $1 in
        -f | -i | --file | --input )
            shift
            bibfile=$1
            ;;
        --tmp )
            shift
            tmpfile=$1
            ;;
        -s | --style )
            shift
            style=$1
            ;;
        -b | --blogpath )
            shift
            blog_path=$1
            ;;
        -p | --pdfpath )
            shift
            pdf_path=$1
            ;;
        -t | --type )
            shift
            type=$1
            ;;
        -a | --add-section )
            shift
            add_section=$1
            ;;
        -c | --content | --contentpath)
            shift
            content_path=$1
            ;;
        -o | --output )
            shift
            outfile=$1
            ;;
        -h | --help )
            usage
            exit
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done


if [ -z $bibfile ]; then
    usage
    exit 1
else
    tmpfile="/tmp/$(basename $0)_$(basename $bibfile)"
fi

if [ -z $outfile ]; then
    outfile="${2-$(echo $type | tr '[:upper:]' '[:lower:]').pd}"
fi
 
# if blog_path isn't specified, pick smart default
if [ "x$blog_path" = "x" ]; then
    case $type in
        Publications|Papers)
            blog_path="../papers/"
            ;;
        Presentations|Talks|Posters)
            blog_path="../talks/"
            ;;
        *)
            blog_path="../"
            ;;
    esac
fi

# if pdf_path isn't specified, pick smart default
if [ "x$pdf_path" = "x" ]; then
    case $type in
        Publications|Papers)
            pdf_path="../doc/papers/"
            ;;
        Presentations|Talks|Posters)
            pdf_path="../doc/talks/"
            ;;
        *)
            pdf_path="../doc/pdf/"
            ;;
    esac
fi


######################
#  Prepare Bib-File  #
######################

# only keep lines with bibtex key
grep -E "^@" $bibfile > $tmpfile

# turn remaining lines into pandoc keys;
# first remove bibtext type and number items
sed -i 's/@[[:alpha:]]*{/1.  \[@/g' $tmpfile
# then close the pandoc key with ]
sed -i 's/,/\]\n/g' $tmpfile


#######################
#  Pandoc Conversion  #
#######################

# we use asciidoc as an intermediary to keep the ref-ids;
# strictly speaking this doesn't translate much
# because pandoc has no asciidoc reader; ah well, maybe in the future
pandoc $tmpfile --bibliography $bibfile --csl $style -t asciidoc --standalone --wrap=none -o ${tmpfile}_asciidoc
pandoc ${tmpfile}_asciidoc -t markdown --wrap=none -o $tmpfile
# clean-up
rm ${tmpfile}_asciidoc

# remove URL links as they're best kept in the details;
# this must be done before we move ref ids to the end;
sed -i 's/ http:.*//' $tmpfile

# format ref ids and move to end
sed -i 's|.*\\\[\\\[ref-\([[:alnum:]]*\)\\\]\\\] \(.*\)|\2 [\[pdf\]]('"$pdf_path"'\1.pdf) [\[details\]]('"$blog_path"'\1)|' $tmpfile

# Pelican's slugify lowercases all urls,
# so we do the same for the details link;
# find /[:alphanum:]*)$, lowercase it, and add .html
sed -i 's|\(/[[:alnum:]]*\))$|\L\1\.html)|' $tmpfile

# remove citation triggers;
# this works because bib-file preparation numbered them all
grep -Ev "^[0-9]+\." $tmpfile > ${tmpfile}_grep
mv ${tmpfile}_grep $tmpfile
# and now remove blank lines at start
sed -i '/./,$!d' $tmpfile

# itemize biliography
sed -i 's/^\([[:alnum:]]\)/- \1/' $tmpfile


###########
#  Hacks  #
###########
# fix th on numbers
sed -i 's/latexmath:\\\[\$\([[:alnum:]]*\)\^{\?\\text{th}}\?\$\\\]/\1th/g' $tmpfile

# second bold face should be italic
# this regex is hard to read, so we first switch from ** to !!
sed -i 's/\*\*/!!/g' $tmpfile
sed -i 's/\([^!]*!![^!]*!![^!]*\)!!\([^!]*\)!!\([^!]*\)/\1\*\2\*\3/' $tmpfile
# and now back from !! to **
sed -i 's/!!/**/g' $tmpfile

# insert empty line at top
sed -i '1s/.*/\n&/' $tmpfile


##############
#  Finalize  #
##############
if [ $type = "Entry" ]; then
    add_section="False"
fi

if [ $add_section = "True" ]; then
    sed -i "1s/^/\n# ${type}\n/" $tmpfile
fi
mv $tmpfile $outfile
