#!/bin/sh

# Basic usage
usage() {
    echo "Convert bibtex entry to pelican blog entry
    
Usage: bib2blog [options] -i BIBFILE -k BIBKEY"
}

# Detailed help
help() {
echo "bib2blog [options] -i BIBFILE -k BIBKEY

Input: bibtex file and bibkey of entry to be extracted from this file
Output: formatted pelican blog page for the bibentry

Options:

  -f  --file              input file
  -i  --input             input file

  -k  --key               bibkey

  -a  --author            author to be used for blog post

      --tmp               temp file

      --aux               path to folders with extra info for bib entries
      --aux[file]path

  -b  --bib[path]         path to bib folder

  -c  --content[path]     path to pelican content (sub)folder
                          where output file should be saved

  -w  --website[path]     path to website folder

  -h  --help              this overview
"
}


###############
#  Variables  #
###############

# some important paths
website_path="${HOME}/dev/website"
content_path="${website_path}/content"
bib_path="${website_path}/bib"
auxfile_path="${bib_path}/auxfiles"

webauthor="Thomas Graf"
tmpfile="/tmp/bib2blog_${bibkey}.bib"

# options
while [ "$1" != "" ]; do
    case $1 in
        -f | -i | --file | --input )
            shift
            bibfile=$1
            ;;
        -k | --key )
            shift
            bibkey=$1
            ;;
        --tmp )
            shift
            tmpfile=$1
            ;;
        -a | --author )
            shift
            webauthor=$1
            ;;
        --aux | --auxpath | --auxfilepath )
            shift
            auxfile_path=$1
            ;;
        -b | --bib | --bibpath )
            shift
            bib_path=$1
            ;;
        -c | --content | --contentpath )
            shift
            content_path=$1
            ;;
        -w | --website | --websitepath )
            shift
            website_path=$1
            ;;
        -h | --help )
            help
            exit
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

# input files must exist
if [ -z "$bibfile" -o -z "$bibkey" ]; then
    echo "Error: missing argument!\n"
    usage
    exit 1
fi


######################
#  File Preparation  #
######################

# look for $bibkey in $bibfile and
# extract the full entry to $tmpfile
awk -v RS='' "/${bibkey},/" $bibfile > $tmpfile

# convert entry to pelican format via bib2mdown
cp $tmpfile ${bibkey}.bib
${bib_path}/bib2mdown -f $tmpfile -t Entry -o bib2blog_${bibkey}


#########################
#  Variable Extraction  #
#########################

# first we go through the pandoc-processed file;
# author goes from third position until first space before (
author=$(sed -e 's/^- \([^(]*\) .*/\1/' bib2blog_${bibkey})
# year occurs between first ( and )
year=$(sed -e 's/^[^(]*(\([0-9]*\)).*/\1/' bib2blog_${bibkey})
# title occurs between first occurrence of stars
title=$(sed -e 's/[^*]*\*\?\*\([^*]*\).*/\1/' bib2blog_${bibkey})

# abstract and tags have their own files so that we do not clutter the bibtex file;
abstract=$(cat ${auxfile_path}/${bibkey}/abstract.pd 2>/dev/null)
tags=$(cat ${auxfile_path}/${bibkey}/tags.pd 2>/dev/null)
# tags_raw=$(cat ${auxfile_path}/${bibkey}/tags.pd 2>/dev/null)
# tags=$(echo "$tags_raw" | tr '[:upper:]' '[:lower:]')
date=$(cat ${auxfile_path}/${bibkey}/date.pd 2>/dev/null)
desc=$(cat ${auxfile_path}/${bibkey}/desc.pd 2>/dev/null)

if [ "x$date" = "x" ]; then
    date=$(echo $year | tr -d "\n")-01-01
fi


# now back to the original bibentry;
# its found between @ and { on the first line;
# we discard all other lines in order to
# determine the type of entry
bibtype=$(sed -e '1s/^@\([^{[:space:]]*\).*/\1/' ${bibkey}.bib | head -n 1)
# and then we just load the whole bib entry
bibtex_clean=$(cat ${bibkey}.bib)

# use type of entry to determine category for blog
case $bibtype in
    Book|book|Proceedings|proceedings)
        category="Books"
        ;;
    Misc|misc)
        category="Presentations"
        ;;
    *)
        category="Papers"
esac

# set a macrotype that determines where blog entries
# are saved in the website's content folder
case $category in
    Presentations)
        macrotype="talks"
        ;;
    *)
        macrotype="papers"
        ;;
esac

# pdf and code paths are generated automatically,
# so you have to make sure to name them accordingly

pdf="{static}/doc/${macrotype}/${bibkey}.pdf"
code="{static}/doc/${macrotype}/${bibkey}.tar.gz"

# now we create the links in the blog entry
pdflink="[pdf]($pdf)"
codelink="[code]($code)"


###################
#  Markdown File  #
###################

# and now we put it all together

# create file with Pelican headers
echo "Title: $(echo $title | tr -d "\n")
Author: $webauthor
Date: $date
Category: $category
Tags: $tags
" > ${content_path}/${macrotype}/${bibkey}.mdown

# add the list of authors
echo "<div markdown class=\"authors\">
$(echo $author | tr -d "\n")
</div>
" >> ${content_path}/${macrotype}/${bibkey}.mdown

# the abstract, if it exists
if [ "x$abstract" != "x" ]; then
echo "<div markdown class=\"abstract\">
<span id=\"abstract-title\">Abstract</span>
$abstract
</div>
" >> ${content_path}/${macrotype}/${bibkey}.mdown
fi

# the Files header
echo "<div markdown class=\"files\">
<span id=\"files-title\">Files</span>"\
>> ${content_path}/${macrotype}/${bibkey}.mdown

# add link to pdf if file exists
if [ -e "${content_path}/doc/${macrotype}/${bibkey}.pdf" ]; then
    echo "[$pdflink]"\
    >> ${content_path}/${macrotype}/${bibkey}.mdown
fi

# add link to source code if file exists
# fixme: we check for tar.gz or zip, but codelink is always tar.gz
if [ -e "${content_path}/doc/${macrotype}/${bibkey}.tar.gz" -o -e "${content_path}/doc/${macrotype}/${bibkey}.zip" ]; then
    echo "[$codelink]"\
    >> ${content_path}/${macrotype}/${bibkey}.mdown
fi

# close the Files div element
echo "</div>
" >> ${content_path}/${macrotype}/${bibkey}.mdown

# print the full bibtex entry, verbatim
echo '~~~' >> ${content_path}/${macrotype}/${bibkey}.mdown
echo ':::bibtex' >> ${content_path}/${macrotype}/${bibkey}.mdown
cat  ${bibkey}.bib >> ${content_path}/${macrotype}/${bibkey}.mdown
echo '~~~' >> ${content_path}/${macrotype}/${bibkey}.mdown


##############
#  Clean-Up  #
##############

if [ -e $tmpfile ]; then
    rm $tmpfile
fi

if [ -e ${bibkey}.bib ]; then
    rm ${bibkey}.bib
fi

if [ -e bib2blog_${bibkey} ]; then
    rm bib2blog_${bibkey}
fi
