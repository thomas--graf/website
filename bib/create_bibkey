#!/bin/sh

# Basic usage
usage() {
    echo "Produce blog entry for every item in bibtex file

Usage: create_bibkey [options] -i BIBFILE"
}

# Detailed help
help() {
echo "create_bibkey [options] -i BIBFILE

Input: bibtex file
Output: pelican blog page for each bibentry

Options:

  -f  --file              input file
  -i  --input             input file

      --tmp               temp file

  -b  --bib[path]         path to bib folder

  -w  --website[path]     path to website folder

  -h  --help              this overview
"
}


###############
#  Variables  #
###############

website_path="${HOME}/dev/website"
bib_path="${website_path}/bib"
tmppath="/tmp"

# options
while [ "$1" != "" ]; do
    case $1 in
        -f | -i | --file | --input )
            shift
            bibfile=$1
            ;;
        --tmp )
            shift
            tmppath=$1
            ;;
        -b | --bib | --bibpath )
            shift
            bib_path=$1
            ;;
        -w | --website | --websitepath )
            shift
            website_path=$1
            ;;
        -h | --help )
            help
            exit
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

# input file must exist
if [ -z $bibfile ]; then
    echo "Error: missing argument!\n"
    usage
    exit 1
fi

# also set a default output file if none specified
if [ -z $outfile ]; then
    outfile="${tmppath}/$(basename $bibfile).keys"
fi


##########
#  Body  #
##########

# only keep lines with bibtex key
grep -E "^@" $bibfile > $outfile

# only keep bibkeys
sed -i 's/@[[:alpha:]]*{//g' $outfile
sed -i 's/,$//g' $outfile

# create blog page for each bib entry
for key in $(cat $outfile); do
    ${website_path}/bib/bib2blog -i $bibfile -k $key;
done

# clean up
if [ -e $outfile ]; then
    rm $outfile
fi
