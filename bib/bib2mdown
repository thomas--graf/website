#!/bin/sh

# Basic usage
usage() {
    echo "
    Convert bib file to markdown list of entries
    
    Usage: bib2mdown [options] -i BIBFILE
    "
}

# Detailed help
help() {
echo "bib2mdown [options] -i BIBFILE

Input: must be a bibtex file
Output: formatted markdown list of bibtex entries

Options:

  Files and Paths
  -------------------------------------------------------------------
  -f  --file              input file
  -i  --input             input file

  -o  --output            output file

      --tmp               temp file

  -b  --blogpath          path for pelican-internal link resolution

  -c  --content           path to pelican content (sub)folder
                          where output file shold be saved
      --content-path      dito

  -p  --pdfpath           path to pdf folder

  -s  --style             csl style sheet to use in conversion

  -w  --website-folder    path to website folder


  Output Parameters
  -------------------------------------------------------------------
  -a  --add-section       Boolean; should we add the type as a header
                          at the top of the output file? 
                          [Default=true]

  -n  --numbered          Boolean; produce numbered list of entries?

  -r  --reverse-numbered  Boolean; reverse-numbered list of entries?

  -t  --type              specify type of blog page to create;
                          Output: formatted bibliography of all
                          bibtex entries
                          Entry: blog page for single bibtex entry;
                          sets add-section=False

                        
  Miscellaneous
  -------------------------------------------------------------------
  -h  --help            this overview
"
}


###############
#  Variables  #
###############

# bibfile with entries to convert
bibfile=$1

# some important paths
website_path="${HOME}/dev/website"
content_path="${website_path}/content"
pages_path="${content_path}/pages"
bib_path="${website_path}/bib"
style="${bib_path}/mylanguage.csl"

# are we producing a large bibliography [Output]
# or a blogpost for single bibtex entry [Entry]
type="Output"

# should the type be added as a header to the output file?
add_section="True"

# options
while [ "$1" != "" ]; do
    case $1 in
        -f | -i | --file | --input )
            shift
            bibfile=$1
            ;;
        --tmp )
            shift
            tmpfile=$1
            ;;
        -s | --style )
            shift
            style=$1
            ;;
        -b | --blogpath )
            shift
            blog_path=$1
            ;;
        -p | --pdfpath )
            shift
            pdf_path=$1
            ;;
        -t | --type )
            shift
            type=$1
            ;;
        -a | --add-section )
            shift
            add_section=$1
            ;;
        -c | --content | --contentpath )
            shift
            content_path=$1
            ;;
        -o | --output )
            shift
            outfile=$1
            ;;
        -n | --numbered )
            shift
            numbered_list=$1
            ;;
        -r | --reverse-numbered )
            shift
            reverse_numbered_list=$1
            ;;
        -w | --website )
            shift
            website_path=$1
            ;;
        -h | --help )
            help
            exit
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

# input file must exist,
if [ -z $bibfile ]; then
    usage
    exit 1
# and we create a default tmp-file if not manually specified
elif [ "x$tmpfile" = "x" ]; then
    tmpfile="/tmp/$(basename $0)_$(basename $bibfile)"
fi

# also set a default output file: lowercase $type.mdown
if [ -z $outfile ]; then
    outfile="${2-$(echo $type | tr '[:upper:]' '[:lower:]').mdown}"
fi
 
# if blog_path isn't specified, pick smart default
if [ "x$blog_path" = "x" ]; then
    case $type in
        Publications|Papers)
            blog_path="{filename}/papers/"
            ;;
        Presentations|Talks|Posters)
            blog_path="{filename}/talks/"
            ;;
        *)
            blog_path="{filename}/"
            ;;
    esac
fi

# if pdf_path isn't specified, pick smart default
if [ "x$pdf_path" = "x" ]; then
    case $type in
        Publications|Papers)
            pdf_path="{filename}/doc/papers/"
            ;;
        Presentations|Talks|Posters)
            pdf_path="{filename}/doc/talks/"
            ;;
        *)
            pdf_path="{filename}/doc/pdf/"
            ;;
    esac
fi


######################
#  Prepare Bib-File  #
######################

# only keep lines with bibtex key
grep -E "^@" $bibfile > $tmpfile

# turn remaining lines into pandoc keys;
# first remove bibtext type and number items
sed -i 's/@[[:alpha:]]*{/1.  \[@/g' $tmpfile
# then close the pandoc key with ]
sed -i 's/,/\]\n/g' $tmpfile


#######################
#  Pandoc Conversion  #
#######################

# we use asciidoc as an intermediary to keep the ref-ids;
# strictly speaking this doesn't translate much
# because pandoc has no asciidoc reader; ah well, maybe in the future
# NOTE: --wrap=none is --no-wrap in earlier versions of pandoc
if [ -z $tmpfile ]; then
    echo "$tmpfile does not exist!"
    exit 1
else
    pandoc $tmpfile --bibliography $bibfile --csl $style -t asciidoc --standalone --wrap=none -o ${tmpfile}_asciidoc
fi

if [ -z ${tmpfile}_asciidoc ]; then
    echo "${tmpfile}_asciidoc does not exist!"
    exit 1
else
    pandoc ${tmpfile}_asciidoc -t markdown --wrap=none -o $tmpfile
fi

# clean-up
if [ -e ${tmpfile}_asciidoc ]; then
    rm ${tmpfile}_asciidoc
fi

# make doi hyperlinks;
# we first extract all relevant parts,
# and the reassemble them into a markdown link
sed -i 's|doi:\(https\{0,1\}\)://\([^/]*\)/\([^/]*\)/\([^\\]*\)\\\(_\{0,1\}\)\([^\\]*\).*|doi:[\3/\4\5\6](\1://\2/\3/\4\5\6)|g' $tmpfile

# remove URL links as they're best kept in the details;
# this must be done before we move ref ids to the end;
sed -i 's| https\{0,1\}://.*||g' $tmpfile

# format ref ids and move to end
sed -i 's|.*\\\[\\\[ref-\([[:alnum:]]*\)\\\]\\\] \(.*\)|\2 [\[pdf\]]('"$pdf_path"'\1.pdf) [\[details\]]('"$blog_path"'\1.mdown)|' $tmpfile

# Pelican's slugify lowercases all urls,
# so we do the same for the details link;
# find /[:alphanum:]*)$, lowercase it, and add .html
# sed -i 's|\(/[[:alnum:]]*\))$|\L\1\.html)|' $tmpfile

# remove citation triggers;
# this works because bib-file preparation numbered them all
grep -Ev "^[0-9]+\." $tmpfile > ${tmpfile}_grep
mv ${tmpfile}_grep $tmpfile

# delete links to non-existent files;
# first we create a new temporary file to store lines after filtering
touch ${tmpfile}_filtered

# now we search every line in the file for a pdf path
while read line; do
    # extract the pdf link
    pdf_file=$(echo $line | sed 's|.*\[\[pdf\]\]({filename}/\([^)]*\)).*|\1|')
    # if the line contains a pdf link, pdf_file is not empty;
    # but if it is non-empty and the linked file does not exist,
    # it is a dead link and must be removed
    if [ ! -z "$pdf_file" -a ! -f "${content_path}/$pdf_file" ]; then
        line=$(echo $line | sed 's|\[\[pdf\]\]([^)]*) ||')
    fi
    # write the (possibly modified) line to filtered tmp file
    echo "$line" >> ${tmpfile}_filtered
done < $tmpfile

# and make the filtererd tmp file the new base tmpfile
mv ${tmpfile}_filtered $tmpfile

# next step: remove blank lines at start
sed -i '/./,$!d' $tmpfile

# itemize biliography as desired
if [ $numbered_list ]; then
    sed -i 's/^\([[:alnum:]]\)/0. \1/' $tmpfile
elif [ $reverse_numbered_list ]; then
    # wrap entries in <li> tags 
    # the markdown specification makes sure the markdown inside the tags gets parsed by pelican
    sed -i 's/^\([[:alnum:]]\)/<li markdown>\n\1/' $tmpfile
    sed -i 's|^\([^\n<]\+\)|\1\n</li>|' $tmpfile
    # wrap in ordered list environment
    sed -i '1s|^|\n<ol reversed markdown>\n|' $tmpfile
    sed -i '$ s|>|>\n</ol>|' $tmpfile
    # delete empty lines
    sed -i '/^\s*$/d' $tmpfile
else
    sed -i 's/^\([[:alnum:]]\)/- \1/' $tmpfile
fi


###########
#  Hacks  #
###########
# remove latexmath stuff
sed -i 's/latexmath:\[\$\([^\$]*\)\$\]/\1/g' $tmpfile
# remove text commands
sed -i 's/text[[:alnum:]]*{\([^}]*\)}/\1/g' $tmpfile
# fix superscripts for numbers
sed -i 's|\^{\{0,1\}\([^\}]*\)}\{0,1\}|\1|g' $tmpfile

# fix duplicated Ms.
sed -i 's/ ms\. Ms\./ Ms\./' $tmpfile

# fix titles in italic instead of boldface
sed -i 's/: \*\([^*]\+\)\*/: \*\*\1\*\*/' $tmpfile

# second bold face should be italic
# this regex is hard to read, so we first switch from ** to !!
sed -i 's/\*\*/!!/g' $tmpfile
sed -i 's/\([^!]*!![^!]*!![^!]*\)!!\([^!]*\)!!\([^!]*\)/\1\*\2\*\3/' $tmpfile
# and now back from !! to **
sed -i 's/!!/**/g' $tmpfile

# fix broken links
sed -i 's|{filename[^}]|{filename}/|g' $tmpfile


##############
#  Finalize  #
##############
# insert empty line at top
sed -i '1s/.*/\n&/' $tmpfile

if [ $type = "Entry" ]; then
    add_section="False"
fi

if [ $add_section = "True" ]; then
    sed -i "1s/^/\n# ${type}\n/" $tmpfile
fi
mv $tmpfile $outfile
